package br.view.correcao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Observer;
import org.jboss.seam.annotations.Scope;
import br.facade.DigitacaoNotaManualFacade;
import br.model.Inscricao;
import br.model.UsuarioLogado;
import br.model.prova.Prova;
import br.model.resultado.ResultadoProvaManual.VersaoResultadoProvaManual;
import static org.easymock.EasyMock.*;
import org.junit.*;
import java.util.*;
import static org.junit.Assert.*;

/**
 * Testes unitarios para a classe {@link DigitacaoNotaManualListarBean}.
 */
public class TestDigitacaoNotaManualListarBean extends br.view.JsfTestCase {

/**
 * Classe sendo testada {@link DigitacaoNotaManualListarBean}.
 */
private DigitacaoNotaManualListarBean digitacaoNotaManualListarBean;

@Override
public void setUp() throws Exception {
  super.setUp();
  digitacaoNotaManualListarBean = new DigitacaoNotaManualListarBean();
}

/**
 * Cria o mock {@link DigitacaoNotaManualFacade} e seta na classe sendo testada.
 * @return o mock criado
 */
private DigitacaoNotaManualFacade criarMockDigitacaoNotaManualFacade() {
  DigitacaoNotaManualFacade mock = createStrictMock(DigitacaoNotaManualFacade.class);
  digitacaoNotaManualListarBean.setDigitacaoNotaManualFacade(mock);
  return mock;
}

/**
 * Teste para o metodo {@link DigitacaoNotaManualListarBean#pesquisar()}.
 */
@Test
public void testPesquisar() {

// variaveis usadas
final Prova provaSelecionada = new Prova(1);
final UsuarioLogado usuarioLogado = new Usuario(1);

// Configurando mock
DigitacaoNotaManualFacade digitacaoNotaManualFacade = criarMockDigitacaoNotaManualFacade();
expect(digitacaoNotaManualFacade.searchInscricoes(usuarioLogado))
  .andReturn(inscricoesFromMock);
expect(digitacaoNotaManualFacade.existsNotaProvisoriaStatusCadastrada(provaSelecionada))
  .andReturn(excluivelFromMock);
replay(digitacaoNotaManualFacade);

// Configurando estado interno da classe sob teste
digitacaoNotaManualListarBean.setProvaSelecionada(provaSelecionada);
digitacaoNotaManualListarBean.setUsuarioLogado(usuarioLogado);

// invocar metodo sendo testado
digitacaoNotaManualListarBean.pesquisar();

// checar estados dos mocks
verify(digitacaoNotaManualFacade);

// verificacoes do resultado do metodo sendo testado
assertEquals(excluivelFromMock, digitacaoNotaManualListarBean.isExcluivel());
assertEquals(inscricoesFromMock, digitacaoNotaManualListarBean.getInscricoes());
}
}
