package br.gov.esaf.sgc.business.impl;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import br.gov.esaf.sgc.dao.CampoAtuacaoDao;
import br.gov.esaf.sgc.model.Pessoa;
import static org.easymock.EasyMock.*;
import org.junit.*;
import java.util.*;
import static org.junit.Assert.*;

/**
 * Testes unitarios para a classe {@link PessoaBusinessBean}.
 */
public class TestPessoaBusinessBean  {

/**
 * Classe sendo testada {@link PessoaBusinessBean}.
 */
private PessoaBusinessBean pessoaBusinessBean;

/**
 * Configuracoes iniciais.
 */
@Before
public void setUp() {
  pessoaBusinessBean = new PessoaBusinessBean();
}

/**
 * Cria o mock {@link PessoaDao} e seta na classe sendo testada.
 * @return o mock criado
 */
private PessoaDao criarMockPessoaDao() {
  PessoaDao mock = createStrictMock(PessoaDao.class);
  pessoaBusinessBean.setPessoaDao(mock);
  return mock;
}

/**
 * Teste para o metodo {@link PessoaBusinessBean#consultarPessoa(String)}.
 */
@Test
public void testConsultarPessoa() {

// variaveis usadas
final Pessoa pessoaFromMock = new Pessoa(1);
final String cpf = "1";

// Configurando mock
PessoaDao pessoaDao = criarMockPessoaDao();
expect(pessoaDao.selecionarPessoa(cpf))
  .andReturn(pessoaFromMock);
replay(pessoaDao);

// invocar metodo sendo testado
final Pessoa consultarPessoaReal = pessoaBusinessBean.consultarPessoa(cpf);

// checar estados dos mocks
verify(pessoaDao);

// verificacoes do resultado do metodo sendo testado
assertEquals(pessoaFromMock, consultarPessoaReal);
}
}
