package br.gov.esaf.sgc.business.impl;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import br.gov.esaf.sgc.dao.CampoAtuacaoDao;
import br.gov.esaf.sgc.model.Cargo;
import static org.easymock.EasyMock.*;
import org.junit.*;
import java.util.*;
import static org.junit.Assert.*;

/**
 * Testes unitarios para a classe {@link CampoAtuacaoBusinessBean}.
 */
public class TestCampoAtuacaoBusinessBean  {

/**
 * Classe sendo testada {@link CampoAtuacaoBusinessBean}.
 */
private CampoAtuacaoBusinessBean campoAtuacaoBusinessBean;

/**
 * Cria o mock {@link CampoAtuacaoDao} e seta na classe sendo testada.
 * @return o mock criado
 */
private CampoAtuacaoDao criarMockCampoAtuacaoDao() {
  CampoAtuacaoDao mock = createStrictMock(CampoAtuacaoDao.class);
  campoAtuacaoBusinessBean.setCampoAtuacaoDao(mock);
  return mock;
}

/** Configuracoes iniciais. */
@Before
public void setUp() {
  campoAtuacaoBusinessBean = new CampoAtuacaoBusinessBean();
}

/**
 * Teste para o metodo {@link CampoAtuacaoBusinessBean#alterarSituacaoDosCamposDeAtuacaoDoCargo(Cargo, boolean)}.
 */
@Test
public void testAlterarSituacaoDosCamposDeAtuacaoDoCargo() {
// variaveis usadas
final boolean alterarSituacaoDosCamposDeAtuacaoDoCargoFromMock = false;
final boolean alterarSituacaoDosCamposDeAtuacaoDoCargoEsperado = false;
final Cargo cargo = new Cargo(1);
final boolean novaSituacao = false;

// Configurando mock
CampoAtuacaoDao campoAtuacaoDao = criarMockCampoAtuacaoDao();
expect(campoAtuacaoDao.alterarSituacaoDosCamposDeAtuacaoDoCargo(cargo,novaSituacao))
  .andReturn(alterarSituacaoDosCamposDeAtuacaoDoCargoFromMock);
replay(campoAtuacaoDao);

// invocar metodo sendo testado
final boolean alterarSituacaoDosCamposDeAtuacaoDoCargoReal = campoAtuacaoBusinessBean.alterarSituacaoDosCamposDeAtuacaoDoCargo(cargo,novaSituacao);

// checar estados dos mocks
verify(campoAtuacaoDao);

// verificacoes do resultado do metodo sendo testado
assertEquals(alterarSituacaoDosCamposDeAtuacaoDoCargoFromMock, alterarSituacaoDosCamposDeAtuacaoDoCargoReal);
}
}
