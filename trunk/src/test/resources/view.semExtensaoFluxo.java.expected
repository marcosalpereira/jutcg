package br.view.correcao;

import static org.easymock.EasyMock.*;
import org.junit.*;
import java.util.*;
import static org.junit.Assert.*;

/**
 * Testes unitarios para a classe {@link ManagedBean}.
 */
public class TestManagedBean extends br.view.JsfTestCase {

/**
 * Classe sendo testada {@link ManagedBean}.
 */
private ManagedBean managedBean;

@Override
public void setUp() throws Exception {
  super.setUp();
  managedBean = new ManagedBean();
}

/**
 * Cria o mock {@link Facade} e seta na classe sendo testada.
 * @return o mock criado
 */
private Facade criarMockFacade() {
  Facade mock = createStrictMock(Facade.class);
  managedBean.setFacade(mock);
  return mock;
}

/**
 * Teste para o metodo {@link ManagedBean#pesquisar()}.
 * Descricao do Fluxo: 
 *     Entra: for (Inscricao inscricao : inscricoes) {.
 */
@Test
public void testPesquisarPath1() {

// variaveis usadas
final List<Inscricao> inscricoes = Arrays.asList(new Inscricao(1));
final Map<Inscricao, Boolean> inscricoesExcluiveis = newHashMap(new Inscricao(2), Boolean.FALSE);

// Configurando mock
Facade facade = criarMockFacade();
expect(facade.searchInscricoes())
  .andReturn(inscricoes);
boolean bExcluivel = false;
expect(facade.isExcluivel(inscricao))
  .andReturn(bExcluivel);
replay(facade);

// Configurando estado interno da classe sob teste
managedBean.setInscricoes(inscricoes);
managedBean.setInscricoesExcluiveis(inscricoesExcluiveis);

// invocar metodo sendo testado
managedBean.pesquisar();

// checar estados dos mocks
verify(facade);

// verificacoes do resultado do metodo sendo testado
final List<Inscricao> getInscricoesExpected;
assertEquals(getInscricoesExpected, managedBean.getInscricoes());
final Map<Inscricao, Boolean> getInscricoesExcluiveisExpected;
assertEquals(getInscricoesExcluiveisExpected, managedBean.getInscricoesExcluiveis());
}

/**
 * Teste para o metodo {@link ManagedBean#pesquisar()}.
 * Descricao do Fluxo: 
 * NAO Entra: for (Inscricao inscricao : inscricoes) {.
 */
@Test
public void testPesquisarPath2() {

// variaveis usadas
final List<Inscricao> inscricoes = Arrays.asList(new Inscricao(1));

// Configurando mock
Facade facade = criarMockFacade();
expect(facade.searchInscricoes())
  .andReturn(inscricoes);
replay(facade);

// Configurando estado interno da classe sob teste
managedBean.setInscricoes(inscricoes);

// invocar metodo sendo testado
managedBean.pesquisar();

// checar estados dos mocks
verify(facade);

// verificacoes do resultado do metodo sendo testado
final List<Inscricao> getInscricoesExpected;
assertEquals(getInscricoesExpected, managedBean.getInscricoes());
final Map<Inscricao, Boolean> getInscricoesExcluiveisExpected;
assertEquals(getInscricoesExcluiveisExpected, managedBean.getInscricoesExcluiveis());
}
}
