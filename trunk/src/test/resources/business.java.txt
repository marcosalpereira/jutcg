package br.gov.esaf.sgc.business.impl;

import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;

import br.gov.esaf.sgc.business.ResultadoProvaManualBusiness;
import br.gov.esaf.sgc.dao.ResultadoProvaManualDao;
import br.gov.esaf.sgc.model.AplicacaoProva;
import br.gov.esaf.sgc.model.Cidade;
import br.gov.esaf.sgc.model.Concurso;
import br.gov.esaf.sgc.model.Inscricao;
import br.gov.esaf.sgc.model.TipoConsultaNome;
import br.gov.esaf.sgc.model.prova.Prova;
import br.gov.esaf.sgc.model.resultado.ResultadoProvaManual;
import br.gov.esaf.sgc.model.resultado.ResultadoProvaManual.StatusResultadoProvaManual;
import br.gov.esaf.sgc.model.resultado.ResultadoProvaManual.VersaoResultadoProvaManual;
import br.gov.serpro.util.DateHelper;

/**
 * Regras de negócio referente a entidade {@link ResultadoProvaManualBusiness}.
 */
@Stateless
public class ResultadoProvaManualBusinessBean implements ResultadoProvaManualBusiness {

    /**
     * Dao para entidade {@link ResultadoProvaManual}.
     */
    @EJB
    private ResultadoProvaManualDao resultadoProvaManualDao;

    public void setResultadoProvaManualDao(ResultadoProvaManualDao resultadoProvaManualDao) {
        this.resultadoProvaManualDao = resultadoProvaManualDao;
    }

    /** {@inheritDoc} */
    @Override
    public void cadastrarResultado(ResultadoProvaManual resultadoProvaManual) {
        if (resultadoProvaManual.isPersistido()) {
            resultadoProvaManualDao.alterarResultado(resultadoProvaManual);
        } else {
            resultadoProvaManualDao.inserirResultado(resultadoProvaManual);
        }
    }

    /** {@inheritDoc} */
    @Override
    public void desconectarResultado(ResultadoProvaManual resultadoProvaManual) {
        resultadoProvaManualDao.desconectarResultado(resultadoProvaManual);
    }

    /** {@inheritDoc} */
    @Override
    public ResultadoProvaManual consultarResultadoProvaManual(Inscricao inscricao,
        Prova prova, VersaoResultadoProvaManual versao, Cidade cidade) {
        return resultadoProvaManualDao.selecionarResultadoProvaManual(prova, inscricao,
            versao, null, cidade);
    }


    /** {@inheritDoc} */
    @Override
    public ResultadoProvaManual consultarResultadoProvaManualProvisorio(
        Inscricao inscricao, Prova prova) {
        return resultadoProvaManualDao.selecionarResultadoProvaManualValido(prova, inscricao,
            VersaoResultadoProvaManual.PROVISORIA, StatusResultadoProvaManual.VALIDADO);
    }

    /** {@inheritDoc} */
    @Override
    public ResultadoProvaManual consultarResultadoProvaManualDefintiva(
        Inscricao inscricao, Prova prova) {
        return resultadoProvaManualDao.selecionarResultadoProvaManualValido(prova, inscricao,
            VersaoResultadoProvaManual.DEFINITIVA, StatusResultadoProvaManual.VALIDADO);
    }

    /** {@inheritDoc} */
    @Override
    public void excluirResultado(Inscricao inscricao, Prova prova, Cidade cidade) {
        final ResultadoProvaManual resultadoProvaManual =
            resultadoProvaManualDao.selecionarResultadoProvaManual(prova, inscricao,
                VersaoResultadoProvaManual.PROVISORIA,
                StatusResultadoProvaManual.CADASTRADO, cidade);
        if (resultadoProvaManual != null) {
            resultadoProvaManualDao.excluirResultado(resultadoProvaManual);
        }
    }

    /** {@inheritDoc} */
    @Override
    public boolean existeNotaProvisoriaValidada(Prova prova) {
        return resultadoProvaManualDao.existeResultado(prova,
            VersaoResultadoProvaManual.PROVISORIA, StatusResultadoProvaManual.VALIDADO);
    }

    /** {@inheritDoc} */
    @Override
    public boolean existeNotaDefinitiva(Prova prova) {
        return resultadoProvaManualDao.existeResultado(prova,
            VersaoResultadoProvaManual.DEFINITIVA);
    }

    /** {@inheritDoc} */
    @Override
    public boolean existeNotaProvisoriaStatusCadastrada(Inscricao inscricao, Prova prova,
        Cidade cidade) {
        return resultadoProvaManualDao.existeResultado(prova,
            VersaoResultadoProvaManual.PROVISORIA, StatusResultadoProvaManual.CADASTRADO,
            inscricao, cidade);
    }

    /** {@inheritDoc} */
    @Override
    public List<Inscricao> consultarInscricoesComNotaDefinitiva(Prova prova,
        String numeroInscricao, String nomeCandidato, TipoConsultaNome tipoConsultaNome) {

        return resultadoProvaManualDao.selecionarInscricoesComNota(
            VersaoResultadoProvaManual.DEFINITIVA, prova, numeroInscricao, nomeCandidato,
            tipoConsultaNome);
    }

    /** {@inheritDoc} */
    @Override
    public void alterarResultado(ResultadoProvaManual resultadoProvaManual) {
        resultadoProvaManualDao.alterarResultado(resultadoProvaManual);
    }

    /** {@inheritDoc} */
    @Override
    public List<ResultadoProvaManual> consultarResultadosRepetidos(Prova prova) {
        return resultadoProvaManualDao.selecionarResultadosRepetidos(prova);
    }

    /** {@inheritDoc} */
    @Override
    public boolean existeResultadoValidadoAplicacaoProva(
        AplicacaoProva aplicacaoProva) {
        return resultadoProvaManualDao.existeResultadoValidadoAplicacaoProva(aplicacaoProva);
    }

    /** {@inheritDoc} */
    @Override
    public List<Concurso> consultarConcursosAndamentoComResultadoCadastrado() {
        return resultadoProvaManualDao.selecionarConcursosAndamentoComResultadoCadastrado();
    }

    /** {@inheritDoc} */
    @Override
    public List<Prova> consultarProvasComResultadoCadastrado(Concurso concurso) {
        return resultadoProvaManualDao.selecionarProvasComResultadoCadastrado(concurso);
    }

    /** {@inheritDoc} */
    @Override
    public List<ResultadoProvaManual> consultarResultadosProvaManual(Prova prova,
        VersaoResultadoProvaManual versao, int posicaoInicial, int quantidadeRegistros) {
        return resultadoProvaManualDao.selecionarResultadosProvaManual(prova, versao,
            posicaoInicial, quantidadeRegistros);
    }

    /** {@inheritDoc} */
    @Override
    public int contarResultadosProvaManual(Prova prova, VersaoResultadoProvaManual versao) {
        return resultadoProvaManualDao.contarResultadosProvaManual(prova, versao);
    }


    /** {@inheritDoc} */
    @Override
    public void cancelarValidacaoNotas(Prova prova, VersaoResultadoProvaManual versao) {
        resultadoProvaManualDao.alterarStatus(prova, versao,
            StatusResultadoProvaManual.CADASTRADO, DateHelper.dataHoraAtual());

        if (versao.isProvisoria()) {
            resultadoProvaManualDao.excluirResultadosDefinitivos(prova);
        }

    }

    /** {@inheritDoc} */
    @Override
    public void validarNotas(Prova prova, VersaoResultadoProvaManual versao) {
        resultadoProvaManualDao.alterarStatus(prova, versao,
            StatusResultadoProvaManual.VALIDADO, DateHelper.dataHoraAtual());

        if (versao.isProvisoria()) {
            resultadoProvaManualDao.gerarResultadoDefinitivoApartirProvisorio(prova);
        }
    }

    /** {@inheritDoc} */
    @Override
    public boolean todasAsNotasForamPreenchidas(Prova prova,
        VersaoResultadoProvaManual versao) {
        return resultadoProvaManualDao.todasAsNotasForamPreenchidas(prova, versao);
    }
    
    /** {@inheritDoc} */
    @Override
    public Concurso artificial() {
       final Concurso c1 = resultadoProvaManualDao.selectConcurso(1); 
       final Concurso c2 = resultadoProvaManualDao.selectConcurso(2);
       return resultadoProvaManualDao.choice(c1, c2); 
    }

}
