package br.gov.esaf.sgc.business.impl;

import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;

import br.gov.esaf.sgc.business.CampoAtuacaoBusiness;
import br.gov.esaf.sgc.business.CargoCampoOrgaoContratanteBusiness;
import br.gov.esaf.sgc.business.exceptions.CampoAtuacaoJaExistenteException;
import br.gov.esaf.sgc.dao.CampoAtuacaoDao;
import br.gov.esaf.sgc.dao.EntidadeExistenteException;
import br.gov.esaf.sgc.model.CampoAtuacao;
import br.gov.esaf.sgc.model.Cargo;
import br.gov.esaf.sgc.model.Concurso;
import br.gov.esaf.sgc.model.OrgaoContratante;

/**
 * Classe Business para entidade {@link CampoAtuacao}.
 */
@Stateless
public class CampoAtuacaoBusinessBean implements CampoAtuacaoBusiness {

    /**
     * Dao de CampoAtuacao.
     */
    @EJB
    private CampoAtuacaoDao campoAtuacaoDao;

    /**
     * Business de CargoCampoOrgaoContratante.
     */
    @EJB
    private CargoCampoOrgaoContratanteBusiness campoOrgaoContratanteBusiness;

    public void setCampoAtuacaoDao(CampoAtuacaoDao campoAtuacaoDao) {
        this.campoAtuacaoDao = campoAtuacaoDao;
    }

    public void setCampoOrgaoContratanteBusiness(
        CargoCampoOrgaoContratanteBusiness campoOrgaoContratanteBusiness) {
        this.campoOrgaoContratanteBusiness = campoOrgaoContratanteBusiness;
    }


    /** {@inheritDoc} */
    @Override
    public List<CampoAtuacao> listarCampoAtuacaoPorCargo(Cargo cargo) {
        return campoAtuacaoDao.selecionarCamposAtuacaoPorCargo(cargo);
    }

    /** {@inheritDoc} */
    @Override
    public List<CampoAtuacao> listarCamposAtuacaoAtivos(Cargo cargo) {
        return campoAtuacaoDao.selecionarCamposAtuacaoAtivos(cargo);
    }

    /** {@inheritDoc} */
    @Override
    public void salvarCampoAtuacao(CampoAtuacao campoAtuacao)
        throws CampoAtuacaoJaExistenteException {

        try {
            if (campoAtuacao.isPersistido()) {
                if (campoAtuacao.isDesabilitado()) {
                    //Desabilitar vínculos do campo de atuação com órgãos contratantes.
                    campoOrgaoContratanteBusiness
                        .alterarSituacaoDosVinculosDoCampoDeAtuacaoComOrgaos(
                            campoAtuacao, false);
                }
                campoAtuacaoDao.atualizarCampoAtuacao(campoAtuacao);
            } else {
                campoAtuacaoDao.inserirCampoAtuacao(campoAtuacao);
                campoAtuacao.getCargo().getCamposAtuacao().add(campoAtuacao);
            }
        } catch (EntidadeExistenteException e) {
            throw new CampoAtuacaoJaExistenteException(e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public void excluirCampoAtuacao(CampoAtuacao campoAtuacao) {
        campoAtuacaoDao.excluirCampoAtuacao(campoAtuacao);
        campoAtuacao.getCargo().getCamposAtuacao().remove(campoAtuacao);
    }

    /** {@inheritDoc} */
    @Override
    public void alterarSituacaoDosCamposDeAtuacaoDoCargo(Cargo cargo, boolean novaSituacao) {
        campoAtuacaoDao.alterarSituacaoDosCamposDeAtuacaoDoCargo(cargo, novaSituacao);
    }

    /** {@inheritDoc} */
    @Override
    public List<CampoAtuacao> consultarCampoAtuacao(Concurso concursoSelecionado,
        OrgaoContratante orgaoContratanteSelecionado, Cargo cargoSelecionado) {
        return campoAtuacaoDao.selecionarCamposAtuacaoComOferta(concursoSelecionado,
            orgaoContratanteSelecionado, cargoSelecionado);
    }

}