package br.gov.esaf.sgc.dao.impl;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.ejb.Stateless;
import javax.persistence.Query;
import org.jboss.seam.annotations.Name;
import br.gov.esaf.sgc.dao.VinculoProvaFaseDao;
import br.gov.esaf.sgc.model.AplicacaoProva;
import br.gov.esaf.sgc.model.CampoAtuacao;
import br.gov.esaf.sgc.model.Cargo;
import br.gov.esaf.sgc.model.Cidade;
import br.gov.esaf.sgc.model.Concurso;
import br.gov.esaf.sgc.model.Etapa;
import br.gov.esaf.sgc.model.Fase;
import br.gov.esaf.sgc.model.Idioma;
import br.gov.esaf.sgc.model.Inscricao;
import br.gov.esaf.sgc.model.OfertaCargoConcurso;
import br.gov.esaf.sgc.model.VinculoProvaFase;
import br.gov.esaf.sgc.model.VinculoProvaFase.StatusVinculo;
import br.gov.esaf.sgc.model.prova.Prova;
import br.gov.esaf.sgc.model.prova.ProvaObjetiva;
import br.gov.esaf.sgc.model.prova.Prova.StatusProva;
import br.gov.esaf.sgc.model.prova.Prova.TipoCorrecaoProva;
import br.gov.esaf.sgc.model.prova.ProvaObjetiva.NumeroAplicacaoProva;
import static org.easymock.EasyMock.*;
import org.junit.*;
import java.util.*;
import static org.junit.Assert.*;
import br.gov.esaf.sgc.dao.impl.HibernateTestCase;

/**
 * Testes unitarios para a classe {@link VinculoProvaFaseDaoBean}.
 */
public class TestVinculoProvaFaseDaoBean extends HibernateTestCase {

/**
 * Classe sendo testada {@link VinculoProvaFaseDaoBean}.
 */
private VinculoProvaFaseDaoBean vinculoProvaFaseDaoBean;
/** {@inheritDoc} */
@Override
protected IDataSet getDataSet() {
  return recuperarDataSet("vinculoProvaFaseDS.xml");
}
/** Configuracoes iniciais. */
@Before
public void setUp() {
  vinculoProvaFaseDaoBean = new VinculoProvaFaseDaoBean();
vinculoProvaFaseDaoBean.setEntityManager(getEntityManager());
}

/**
 * Teste para o metodo {@link VinculoProvaFaseDaoBean#inserir(VinculoProvaFase)}.
 */
@Test
public void testInserir() {
// variaveis usadas
final VinculoProvaFase vinculoProvaFase = new VinculoProvaFase(1);
// invocar metodo sendo testado
vinculoProvaFaseDaoBean.inserir(vinculoProvaFase);
}

/**
 * Teste para o metodo {@link VinculoProvaFaseDaoBean#atualizar(VinculoProvaFase)}.
 */
@Test
public void testAtualizar() {
// variaveis usadas
final VinculoProvaFase vinculoProvaFase = new VinculoProvaFase(1);
// invocar metodo sendo testado
vinculoProvaFaseDaoBean.atualizar(vinculoProvaFase);
}

/**
 * Teste para o metodo {@link VinculoProvaFaseDaoBean#excluir(VinculoProvaFase)}.
 */
@Test
public void testExcluir() {
// variaveis usadas
final VinculoProvaFase vinculoProvaFase = new VinculoProvaFase(1);
// invocar metodo sendo testado
vinculoProvaFaseDaoBean.excluir(vinculoProvaFase);
}

/**
 * Teste para o metodo {@link VinculoProvaFaseDaoBean#selecionar(Fase)}.
 */
@Test
public void testSelecionarFase() {
// variaveis usadas
final Fase fase = new Fase(1);
// invocar metodo sendo testado
final Set<VinculoProvaFase> selecionarReal = vinculoProvaFaseDaoBean.selecionar(fase);
// verificacoes do resultado do metodo sendo testado
assertEquals(esperado, selecionarReal);
}

/**
 * Teste para o metodo {@link VinculoProvaFaseDaoBean#selecionar(OfertaCargoConcurso)}.
 */
@Test
public void testSelecionarOfertaCargoConcurso() {
// variaveis usadas
final OfertaCargoConcurso oferta = new OfertaCargoConcurso(1);
// invocar metodo sendo testado
final List<VinculoProvaFase> selecionarReal = vinculoProvaFaseDaoBean.selecionar(oferta);
// verificacoes do resultado do metodo sendo testado
assertEquals(esperado, selecionarReal);
}
}