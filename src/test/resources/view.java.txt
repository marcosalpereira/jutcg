package br.gov.esaf.sgc.view.correcao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.faces.component.UIComponent;
import javax.faces.component.UIInput;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;

import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;

import br.gov.esaf.sgc.facade.DigitacaoNotaManualFacade;
import br.gov.esaf.sgc.model.CampoAtuacao;
import br.gov.esaf.sgc.model.Cargo;
import br.gov.esaf.sgc.model.Cidade;
import br.gov.esaf.sgc.model.Concurso;
import br.gov.esaf.sgc.model.Inscricao;
import br.gov.esaf.sgc.model.OrgaoContratante;
import br.gov.esaf.sgc.model.TipoConsultaNome;
import br.gov.esaf.sgc.model.Uf;
import br.gov.esaf.sgc.model.prova.Prova;
import br.gov.esaf.sgc.model.prova.ConteudoProva.TipoConteudoProva;
import br.gov.esaf.sgc.model.resultado.ResultadoProvaManual.VersaoResultadoProvaManual;
import br.gov.serpro.util.StringHelper;
import br.gov.serpro.view.util.MessageHelper;

/**
 * Bean para o caso de uso Digitar Resultado Manual.
 */
@Name("digitacaoNotaManualListarBean")
@Scope(ScopeType.CONVERSATION)
public class DigitacaoNotaManualListarBean {

    /**
     * Id do componente com o numero da inscricao na tela.
     */
    static final String ID_INPUT_NUMERO_INSCRICAO = "numeroInscricao";

    /**
     * Id do componente com o nome do candidato na tela.
     */
    static final String ID_INPUT_NOME_CANDIDATO = "nomeCandidato";

    /**
     * Concurso selecionado.
     */
    private Concurso concursoSelecionado;

    /**
     * Prova selecionada.
     */
    private Prova provaSelecionada;

    /**
     * Versão da nota selecionada.
     */
    private VersaoResultadoProvaManual versaoSelecionada;

    /**
     * Numero de Inscricao.
     */
    private String numeroInscricao;

    /**
     * Nome Candidato.
     */
    private String nomeCandidato;

    /**
     * Lista de concursos.
     */
    private List<Concurso> concursos;

    /**
     * Lista de provas.
     */
    private List<Prova> provas;

    /**
     * Lista de versões de nota.
     */
    private List<VersaoResultadoProvaManual> versoes;

    /**
     * Tipo de consulta pelo nome.
     */
    private TipoConsultaNome tipoConsultaNome = TipoConsultaNome.INICIO;

    /**
     * Flag que indica se deve ser mostrada a selecao de localidade de provas.
     */
    private boolean mostrarLocalidades;

    /**
     * Uf Selecionada.
     */
    private Uf ufSelecionada;


    /**
     * Lista de UFs.
     */
    private List<Uf> ufs;

    /**
     * Cidade Selecionada.
     */
    private Cidade cidadeSelecionada;

    /**
     * Cidades.
     */
    private List<Cidade> cidades;

    /**
     * Inscrições Pesquisadas.
     */
    private List<Inscricao> inscricoes;

    /**
     * Map indicando se as inscricoes sao excluiveis.
     */
    private Map<Inscricao, Boolean> inscricoesExcluiveis;

    /**
     * Cargos vinculados ao orgao/concurso/prova.
     */
    private List<Cargo> cargos;

    /**
     * Cargo selecionado.
     */
    private Cargo cargoSelecionado;

    /**
     * Cargos vinculados ao orgao/concurso/prova.
     */
    private List<CampoAtuacao> camposAtuacao;

    /**
     * Cargo selecionado.
     */
    private CampoAtuacao campoAtuacaoSelecionado;

    /**
     * Orgaos vinculados ao concurso/prova.
     */
    private List<OrgaoContratante> orgaos;

    /**
     * Orgao selecionado.
     */
    private OrgaoContratante orgaoSelecionado;

    /**
     * Fachada Digitacao Resultado Nota Manual.
     */
    @In("digitacaoNotaManualFacade")
    private transient DigitacaoNotaManualFacade digitacaoNotaManualFacade;

    public void setDigitacaoNotaManualFacade(
        DigitacaoNotaManualFacade digitacaoNotaManualFacade) {
        this.digitacaoNotaManualFacade = digitacaoNotaManualFacade;
    }

    public void setCargos(List<Cargo> cargos) {
        this.cargos = cargos;
    }

    public Cargo getCargoSelecionado() {
        return cargoSelecionado;
    }

    public void setCargoSelecionado(Cargo cargoSelecionado) {
        this.cargoSelecionado = cargoSelecionado;
    }

    public void setCamposAtuacao(List<CampoAtuacao> camposAtuacao) {
        this.camposAtuacao = camposAtuacao;
    }

    public CampoAtuacao getCampoAtuacaoSelecionado() {
        return campoAtuacaoSelecionado;
    }

    public void setCampoAtuacaoSelecionado(CampoAtuacao campoAtuacaoSelecionado) {
        this.campoAtuacaoSelecionado = campoAtuacaoSelecionado;
    }

    public void setOrgaoSelecionado(OrgaoContratante orgaoSelecionado) {
        this.orgaoSelecionado = orgaoSelecionado;
    }

    public OrgaoContratante getOrgaoSelecionado() {
        return orgaoSelecionado;
    }

    public void setOrgaos(List<OrgaoContratante> orgaos) {
        this.orgaos = orgaos;
    }

    public TipoConsultaNome getTipoConsultaNome() {
        return tipoConsultaNome;
    }

    public void setTipoConsultaNome(TipoConsultaNome tipoConsultaNome) {
        this.tipoConsultaNome = tipoConsultaNome;
    }

    public Concurso getConcursoSelecionado() {
        return concursoSelecionado;
    }

    public void setConcursoSelecionado(Concurso concursoSelecionado) {
        this.concursoSelecionado = concursoSelecionado;
    }

    public Prova getProvaSelecionada() {
        return provaSelecionada;
    }

    public void setProvaSelecionada(Prova provaSelecionada) {
        this.provaSelecionada = provaSelecionada;
    }

    public VersaoResultadoProvaManual getVersaoSelecionada() {
        return versaoSelecionada;
    }

    public void setVersaoSelecionada(VersaoResultadoProvaManual versaoSelecionada) {
        this.versaoSelecionada = versaoSelecionada;
    }

    public String getNumeroInscricao() {
        return numeroInscricao;
    }

    public void setNumeroInscricao(String numeroInscricao) {
        this.numeroInscricao = numeroInscricao;
    }

    public String getNomeCandidato() {
        return nomeCandidato;
    }

    public void setNomeCandidato(String nomeCandidato) {
        this.nomeCandidato = nomeCandidato;
    }

    public void setConcursos(List<Concurso> concursos) {
        this.concursos = concursos;
    }

    /**
     * Lista de provas.
     * @return lista de provas
     */
    public List<Prova> getProvas() {
        if (concursoSelecionado != null && provas == null) {
            provas = digitacaoNotaManualFacade.consultarProvas(this.concursoSelecionado);
        }
        return provas;
    }

    public void setProvas(List<Prova> provas) {
        this.provas = provas;
    }

    public void setVersoes(List<VersaoResultadoProvaManual> versoes) {
        this.versoes = versoes;
    }

    public Uf getUfSelecionada() {
        return ufSelecionada;
    }

    public void setUfSelecionada(Uf ufSelecionada) {
        this.ufSelecionada = ufSelecionada;
    }

    public void setUfs(List<Uf> ufs) {
        this.ufs = ufs;
    }

    public Cidade getCidadeSelecionada() {
        return cidadeSelecionada;
    }

    public void setCidadeSelecionada(Cidade cidadeSelecionada) {
        this.cidadeSelecionada = cidadeSelecionada;
    }

    public void setCidades(List<Cidade> cidades) {
        this.cidades = cidades;
    }

    public List<Inscricao> getInscricoes() {
        return inscricoes;
    }

    public void setInscricoes(List<Inscricao> inscricoes) {
        this.inscricoes = inscricoes;
    }

    public Map<Inscricao, Boolean> getInscricoesExcluiveis() {
        return inscricoesExcluiveis;
    }

    public void setInscricoesExcluiveis(Map<Inscricao, Boolean> inscricoesExcluiveis) {
        this.inscricoesExcluiveis = inscricoesExcluiveis;
    }

    /**
     * Lista de concurso.
     * @return lista de concurso
     */
    public List<Concurso> getConcursos() {
        if (concursos == null) {
            concursos = digitacaoNotaManualFacade.consultarConcursos();
        }
        return concursos;
    }
    /**
     * Recupera as versoes, consultando-as se for o caso.
     * @return as versoes
     */
    public List<VersaoResultadoProvaManual> getVersoes() {
        if (provaSelecionada != null && versoes == null) {
            versoes = digitacaoNotaManualFacade.consultarVersoesNota(this.provaSelecionada);
        }
        return versoes;
    }

    public boolean isMostrarLocalidades() {
        return mostrarLocalidades;
    }

    /**
     * Recupera as UFs, consultando-as se for o caso.
     * @return as ufs
     */
    public List<Uf> getUfs() {
        if (concursoSelecionado != null && provaSelecionada != null
            && versaoSelecionada != null && this.ufs == null) {
            this.ufs = digitacaoNotaManualFacade.consultarUfs(concursoSelecionado);
        }
        return ufs;
    }

    /**
     * Recupera as UFs, consultando-as se for o caso.
     * @return as ufs
     */
    public List<Cidade> getCidades() {
        if (this.ufSelecionada != null && cidades == null) {
            this.cidades = digitacaoNotaManualFacade.consultarCidades(concursoSelecionado,
                ufSelecionada);
        }
        return cidades;
    }

    /**
     * Recupera os orgaos, consultando-os se for o caso, quando só existir um
     * ja coloca como selecionado.
     * @return os orgaos
     */
    public List<OrgaoContratante> getOrgaos() {
        if (this.orgaos == null) {
            this.orgaos = digitacaoNotaManualFacade.consultarOrgaos(provaSelecionada);
            // Quando só tem um, já colocar como selecionado.
            if (this.orgaos.size() == 1) {
                orgaoSelecionado = orgaos.get(0);
                onChangeOrgao();
            } else {
                orgaoSelecionado = null;
            }
        }
        return this.orgaos;
    }

    /**
     * Recupera os cargos, consultando-os se for o caso, quando só existir um
     * ja coloca como selecionado.
     * @return os cargos
     */
    public List<Cargo> getCargos() {
        if (this.cargos == null) {
            this.cargos = digitacaoNotaManualFacade.consultarCargos(provaSelecionada,
                orgaoSelecionado);
            // Quando só tem um, já colocar como selecionado.
            if (this.cargos.size() == 1) {
                cargoSelecionado = cargos.get(0);
                onChangeCargo();
            } else {
                cargoSelecionado = null;
            }

        }
        return this.cargos;
    }
    /**
     * Recupera os campos de atuacao, consultando-os se for o caso, quando só existir um
     * ja coloca como selecionado.
     * @return os campos de atuacao
     */
    public List<CampoAtuacao> getCamposAtuacao() {
        if (this.camposAtuacao == null) {
            this.camposAtuacao = digitacaoNotaManualFacade.consultarCamposAtuacao(
                provaSelecionada, orgaoSelecionado, cargoSelecionado);
            // Quando só tem um, já colocar como selecionado.
            if (this.camposAtuacao.size() == 1) {
                campoAtuacaoSelecionado = camposAtuacao.get(0);
                onChangeCampoAtuacao();
            } else {
                campoAtuacaoSelecionado = null;
            }

        }
        return this.camposAtuacao;
    }

    /**
     * Valida se preencheu algum campo de pesquisa e nome com comprimento Minimo.
     * @param context context
     * @param component component
     * @param value component
     * @throws ValidatorException se deu erro
     */
    public void validaTipoConsulta(@SuppressWarnings("unused") FacesContext context,
        UIComponent component, @SuppressWarnings("unused") Object value)
        throws ValidatorException {
        //TODO Poderiamos reaproveitar este código(usado em varios lugares)???

        final UIInput nomeUI = (UIInput) component.findComponent(ID_INPUT_NOME_CANDIDATO);
        final String nome = (String) nomeUI.getValue();

        final UIInput inscricaoUI = (UIInput) component
            .findComponent(ID_INPUT_NUMERO_INSCRICAO);
        final String numeroInscricao = (String) inscricaoUI.getValue();

        // valida se NAO preencheu os campos nome e numeroInscrição
        if (StringHelper.isEmpty(nome) && StringHelper.isEmpty(numeroInscricao)) {
            throw new ValidatorException(
                MessageHelper
                .createErrorMessage(
                    "page.digitacaoNotaManualListar.tipoConsulta.msg.required"));
        }

        // valida se preencheu os campos nome e numeroInscrição
        if (StringHelper.isNotEmpty(nome) && StringHelper.isNotEmpty(numeroInscricao)) {
            throw new ValidatorException(
                MessageHelper
                .createErrorMessage(
                    "page.digitacaoNotaManualListar.tipoConsulta.msg.numeroOuInscricao"));
        }

        // Valida tamanho minimo do nome
        if (StringHelper.isNotEmpty(nome) && nome.length() < 3) {
            throw new ValidatorException(
                MessageHelper
                .createErrorMessage(
                    "page.digitacaoNotaManualListar.tipoConsultaNome.msg.tamanhoMinimo"));
        }


    }

    /**
     * Chamado quando ocorre evento de mundaça no concurso.
     */
    public void onChangeConcurso() {
        this.provas = null;
        this.provaSelecionada = null;
        onChangeProva();
    }

    /**
     * Chamado quando ocorre evento de mundaça na prova.
     */
    public void onChangeProva() {
        this.orgaos = null;
        this.orgaoSelecionado = null;
        onChangeOrgao();

        this.versoes = null;
        this.versaoSelecionada = null;
        onChangeVersao();
    }

    /**
     * Chamado quando ocorre evento de mundaça na versao.
     */
    public void onChangeVersao() {
        this.ufs = null;
        this.ufSelecionada = null;
        onChangeUf();
    }

    /**
     * Chamado quando ocorre evento de mundaça na UF.
     */
    public void onChangeUf() {
        this.cidadeSelecionada = null;
        this.cidades = null;
    }

    /**
     * Evento para quando muda o orgao selecionado.
     */
    public void onChangeOrgao() {
        this.cargos = null;
        this.cargoSelecionado = null;
        onChangeCargo();
    }

    /**
     * Evento para quando muda o cargo selecionado.
     */
    public void onChangeCargo() {
        this.camposAtuacao = null;
        this.campoAtuacaoSelecionado = null;
        onChangeCampoAtuacao();
    }

    /**
     * Evento para quando muda o campo selecionado.
     */
    public void onChangeCampoAtuacao() {
        mostrarLocalidades = mostrarUfCidade();
    }

    /**
     * Verifica se é para mostrar na pagina a UF/Cidade.
     * @return <code>true</code> se é para mostrar
     */
    private boolean mostrarUfCidade() {
        return versaoSelecionada == VersaoResultadoProvaManual.PROVISORIA
            && provaSelecionada != null
            && provaSelecionada.getTipoConteudoProva()
                != TipoConteudoProva.CONTEUDO_PROVA_TITULOS
            && isCamposOfertaPreenchidos()
            && !digitacaoNotaManualFacade
                .provaEstaVinculadaFaseComFasePredecessoraMesmaAplicacaoProva(
                    provaSelecionada, orgaoSelecionado, cargoSelecionado,
                    campoAtuacaoSelecionado);
    }

    /**
     * Verifica se os campos da oferta (orgao/cargo/campo) estão todos
     * preenchidos.
     * @return <code>true</code> se todos estão preenchidos
     */
    private boolean isCamposOfertaPreenchidos() {
        return orgaoSelecionado != null
            && cargoSelecionado != null
            && (getCamposAtuacao().isEmpty() || campoAtuacaoSelecionado != null);
    }

    /**
     * Pesquisar candidatos habilitados para etapa/fase a qual pertence a prova,
     * observando todos os parâmetros informados.
     */
    public void pesquisar() {
        inscricoesExcluiveis = new HashMap<Inscricao, Boolean>();
        if (versaoSelecionada == VersaoResultadoProvaManual.PROVISORIA) {
            inscricoes = digitacaoNotaManualFacade.consultarInscricoes(provaSelecionada,
                orgaoSelecionado, cargoSelecionado, campoAtuacaoSelecionado,
                numeroInscricao, nomeCandidato, tipoConsultaNome);

            for (Inscricao inscricao : inscricoes) {
                inscricoesExcluiveis.put(inscricao, excluivel(inscricao));
            }
        } else {
            inscricoes = digitacaoNotaManualFacade.consultarInscricoesNotaDefinitiva(
                provaSelecionada, numeroInscricao, nomeCandidato, tipoConsultaNome);

            for (Inscricao inscricao : inscricoes) {
                inscricoesExcluiveis.put(inscricao, Boolean.FALSE);
            }
        }
    }

    /**
     * Verifica se pode excluir a versao da nota para a inscricao passada.
     * @param inscricao inscricao
     * @return <code>true</code> se a versão da nota é provisória e seu status seja cadastrado
     */
    private boolean excluivel(Inscricao inscricao) {
        return digitacaoNotaManualFacade.existeNotaProvisoriaStatusCadastrada(inscricao,
            provaSelecionada, cidadeSelecionada);
    }

    /**
     * Exclui os resultados da inscricao informada.
     * @param inscricao inscricao
     */
    public void excluirResultado(Inscricao inscricao) {
        digitacaoNotaManualFacade.excluirResultado(inscricao, provaSelecionada,
            cidadeSelecionada);
        inscricoesExcluiveis.put(inscricao, Boolean.FALSE);
    }
}
